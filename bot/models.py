from enum import Enum


class Student:
    def __init__(self, id: int, name: str, user_name: str, batch: str, current_flow_step: Enum) -> None:
        """
        Initialize a Student object.

        Parameters:
            id (int): The unique identifier for the student.
            name (str): The name of the student.
            user_name (str): The telegram username of the student.
            batch (int): The batch or group to which the student belongs.
            current_flow_step (Enum): The current conversation flow step for the student.

        Returns:
            None

        Example:
            # Create a Student object
            student = Student(id=400, name="Osama Gamal", user_name="@OsamaIs", batch="ุงูุฏูุนุฉ ุงูุซุงูุซุฉ", current_flow_step=1)
        """
        self.id = id
        self.name = name
        self.user_name = user_name
        self.batch = batch
        self.current_flow_step = current_flow_step

    def __repr__(self) -> str:
        return f"Student(id={self.id}, name='{self.name}', user_name='{self.user_name}', batch='{self.batch}', state={self.state})"


# Define the conversation flow steps using a dictionary
flow_steps = {
    'START_AND_CHOOSE_BATCH': {
        'input_type': 'button',
        'message': "ุญููู ุงููู ูู ุงุณุชูู ูู ููุงุจูุน ุงูุนูู ููุฏูุ\nูู ูุถูู ูู ุจุชุญุฏูุฏ ุงูุฏูุนุฉ ุงูุฎุงุตุฉ ุจู",
        'buttons': ['ุงูุฏูุนุฉ ุงูุฃููู', 'ุงูุฏูุนุฉ ุงูุซุงููุฉ', 'ุงูุฏูุนุฉ ุงูุซุงูุซุฉ', 'ุงูุฏูุนุฉ ุงูุฑุงุจุนุฉ']
    },
    'CHOOSE_SECTION': {
        'input_type': 'button',
        'message': "ูุง ุชุจุฑุญ ุนู ุซุบุฑู! ูุงุตู ุนูู ุฌุงุฏุฉ ุงูุทุฑููุ\nูู ูุถูู ูู ุจุงุฎุชูุงุฑ ุงููุณู ุงูุชู ูุชุนูู ุจู ุงูุณุคุงู",
        'buttons': ['ุงููุณู ุงูุดุฑุนู', ('ุงููุณู ุงูุซูุงูู', 'CHOOSE_MATERIAL_TYPE')]
    },
    'CHOOSE_SUBJECT': {
        'input_type': 'button',
        'message': "ุญุงุฐุฑ ูู ุณูุจ ุนููู ููุชูุง ููุง ุชุนุฏูู ุจู ุฐูุจูุง๐\nูู ูุถูู ูู ุจุงุฎุชูุงุฑ ุงููุงุฏุฉ ุงูุชู ูุชุนูู ุจูุง ุงูุณุคุงู.",
        'conditional_buttons': {
            'ุงููุณู ุงูุดุฑุนู': ['ุงูุนููุฏุฉ', 'ุนููู ุงููุฑุขู', 'ุงูุญุฏูุซ', 'ุฃุตูู ุงูููู', 'ุงูููู', 'ููุบุฉ ุงูุนุฑุจูุฉ']
        }
    },
    'CHOOSE_MATERIAL_TYPE': {
        'input_type': 'button',
        'message': "ุนููู ุงูููุงุญ ูู ุฏุฑุฑ ุงูุนุฒู ูุงูุซุจุงุช ูุงุซุจุช!๐\nูู ูุถูู ูู ุจุงุฎุชูุงุฑ ููุน ุงููุงุฏุฉ ุงูุนูููุฉ.",
        'buttons': [('ูุชุงุจ', 'BOOK_NAME'), ('ุณูุณูุฉ ูุญุงุถุฑุงุช', 'SERIES_NAME')]
    },
    'SERIES_NAME': {
        'input_type': 'text',
        'message': "ูุง ุชุทูุจ ุงูุนูู ุฑูุงุกุ ููุง ุชุชุฑูู ุญูุงุก๐\nูู ูุถูู ูู ุจุฅุฑุณุงู ุงุณู ุงูุณูุณูุฉ",
    },
    'LECTURE_NAME_OR_NUMBER': {
        'input_type': 'text',
        'message': "ูุถูุน ุงูุนูู ุจูู ุงุซููู: ุงูุญูุงุก ูุงููุจุฑ.\nูู ูุถูู ูู ุจุฅุฑุณุงู ุงุณู ุงููุญุงุถุฑุฉ ูุงูููุง",
        'next': 'QUESTION'
    },
    'BOOK_NAME': {
        'input_type': 'text',
        'message': "ุฅู ุงูุฌูุงู ุฌูุงู ุงูุนูู ูุงูุฃุฏุจ๐\nูู ูุถูู ูู ุจุฅุฑุณุงู ุงุณู ุงููุชุงุจ",
        'next': 'BOOK_PAGE_NUMBER'
    },
    'BOOK_PAGE_NUMBER': {
        'input_type': 'text',
        'message': "ุงูุนูู ุฃูุถู ุฎููุ ูุงูุนูู ุจู ุฃููู ุดุฑู๐\nูู ูุถูู ูู ุจุฅุฑุณุงู ุฑูู ุงูุตูุญุฉ",
        'next': 'QUESTION'
    },
    'QUESTION': {
        'input_type': 'text',
        'message': "ุงูุนููู ุฃููุงู ูุญุณู ุงูุณุคุงู ููุงุชุญูุง๐\nุชูุถู ุจุงูุณุคุงู",
        'next': 'QUESTION_RECEIVED'
    },
    'QUESTION_RECEIVED': {
        'input_type': 'text',
        'message': "ุดูุฑุง ุงููู ููู ูุฒุงุฏูู ุญุฑุตุง๐\nุณููุงูููู ุจุงูุฑุฏ ูุฑูุจูุง ุฅู ุดุงุก ุงููู"
    }
}